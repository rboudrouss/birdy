// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // "postgresql" 
  url      = "file:./dev.db" // env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique // @db.VarChar(255)
  password    String // @db.VarChar(16)
  username    String // @db.VarChar(20)
  posts       Post[]
  bio         String? // @db.VarChar(256)
  followers   Follows[]    @relation("follower")
  following   Follows[]    @relation("following")
  likes       Likes[]
  nbFollowers Int          @default(0)
  nbFollowing Int          @default(0)
  nbLikes     Int          @default(0)
  images      Image[]
  postsImages postImages[]
  coverImage  coverImage?
  ppImage     ppImage?
  sessions    Session[]
}

model Session {
  id        String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expires   DateTime
}

model Post {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  content   String // @db.VarChar(256)
  author    User         @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     Likes[]
  replyTo   Post?        @relation("replies", fields: [replyId], references: [id], onDelete: SetNull)
  replies   Post[]       @relation("replies")
  replyId   Int?
  nbLikes   Int          @default(0)
  nbReplies Int          @default(0)
  images    postImages[]
}

model Image {
  id         String      @id @unique
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  postImage  postImages?
  coverImage coverImage?
  ppImage    ppImage?
}

model postImages {
  userId  Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  Int
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  imageId String @unique
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([postId, imageId])
}

model coverImage {
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId String @unique
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([imageId, userId])
}

model ppImage {
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId String @unique
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([imageId, userId])
}

model Follows {
  follower    User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("follower", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Likes {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@id([userId, postId])
}
