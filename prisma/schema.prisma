// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  password    String
  username    String
  posts       Post[]
  bio         String?
  followers   Follows[]    @relation("follower")
  following   Follows[]    @relation("following")
  likes       Likes[]
  nbFollowers Int          @default(0)
  nbFollowing Int          @default(0)
  nbLikes     Int          @default(0)
  images      Image[]
  postsImages postImages[]
  coverImage  coverImage?
  ppImage     ppImage?
  sessions    Session[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expires   DateTime
  string    String   @unique // TODO
}

model Post {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime     @default(now())
  content   String
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String       @db.ObjectId
  likes     Likes[]
  replyTo   Post?        @relation("replies", fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Post[]       @relation("replies")
  replyId   String?      @db.ObjectId
  nbLikes   Int          @default(0)
  nbReplies Int          @default(0)
  images    postImages[]
}

model Image {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  postImage  postImages?
  coverImage coverImage?
  ppImage    ppImage?
}

model postImages {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  imageId String @unique @db.ObjectId
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([postId, imageId])
}

model coverImage {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId String @unique @db.ObjectId
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([imageId, userId])
}

model ppImage {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId String @unique @db.ObjectId
  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([imageId, userId])
}

model Follows {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String   @db.ObjectId
  following   User     @relation("follower", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Likes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
